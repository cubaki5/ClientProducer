// Code generated by MockGen. DO NOT EDIT.
// Source: consumer_queue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "clientProducer/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientConsumer is a mock of ClientConsumer interface.
type MockClientConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockClientConsumerMockRecorder
}

// MockClientConsumerMockRecorder is the mock recorder for MockClientConsumer.
type MockClientConsumerMockRecorder struct {
	mock *MockClientConsumer
}

// NewMockClientConsumer creates a new mock instance.
func NewMockClientConsumer(ctrl *gomock.Controller) *MockClientConsumer {
	mock := &MockClientConsumer{ctrl: ctrl}
	mock.recorder = &MockClientConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConsumer) EXPECT() *MockClientConsumerMockRecorder {
	return m.recorder
}

// GetBufferFreeSpace mocks base method.
func (m *MockClientConsumer) GetBufferFreeSpace() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBufferFreeSpace")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBufferFreeSpace indicates an expected call of GetBufferFreeSpace.
func (mr *MockClientConsumerMockRecorder) GetBufferFreeSpace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBufferFreeSpace", reflect.TypeOf((*MockClientConsumer)(nil).GetBufferFreeSpace))
}

// PostBatch mocks base method.
func (m *MockClientConsumer) PostBatch(batch []domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBatch", batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostBatch indicates an expected call of PostBatch.
func (mr *MockClientConsumerMockRecorder) PostBatch(batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBatch", reflect.TypeOf((*MockClientConsumer)(nil).PostBatch), batch)
}
